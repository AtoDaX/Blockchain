type: edu
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Locale;
    import java.util.Objects;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;
        static ArrayList<String> dataStrs;


        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                        "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                        "should start with \"Block data:\"");
            }

            int i;
            StringBuilder dataStr = new StringBuilder(lines.get(9));
            for (i=10; i < lines.size(); i++){
                if (lines.get(i).toLowerCase().contains("block") && lines.get(i).toLowerCase().contains("generating")){
                    break;
                }
                dataStr.append(lines.get(i));
            }
            dataStrs.add(dataStr.toString());

            if (!lines.get(i).toLowerCase().contains("block") && !lines.get(i).toLowerCase().contains("generating")){
                throw new BlockParseException("Second-last line of every block " +
                        "should say how long the block was generating for! (Use the example's format)");
            }

            if (i + 1 >= lines.size()){
                throw new BlockParseException("There should be two lines after the block data.. " +
                        "one for generating time and one for N's status update.");
            }

            if (!lines.get(i+1).toUpperCase().startsWith("N ")) {
                throw new BlockParseException("11-th line of every block " +
                        "should be state what happened to N in the format given.");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();
            dataStrs = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            String firstData = dataStrs.get(0);
            dataStrs.removeIf(s -> Objects.equals(s, firstData));
            if (dataStrs.size() == 0){
                throw new BlockParseException("All blocks contain the same data!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                        "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Utils.java
  visible: true
  text: |-
    package blockchain;

    import java.io.*;
    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.Base64;
    import java.util.HexFormat;

    public class Utils {
        // Serialize object.
        public static String serializeObject(Serializable object) {
            String results;

            try (var byteArrayOutputStream = new ByteArrayOutputStream(); var objectOutputStream = new ObjectOutputStream(byteArrayOutputStream)) {
                objectOutputStream.writeObject(object);
                results = Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());
            } catch (IOException e) {
                throw new RuntimeException("Unexpected error serializing object.");
            }

            return results;
        }

        // Deserialize object.
        public static <T extends Serializable> T deserializeObject(String objectAsString) {
            T results;

            byte[] data = Base64.getDecoder().decode(objectAsString);
            try (var byteArrayInputStream = new ByteArrayInputStream(data); var objectInputStream = new ObjectInputStream(byteArrayInputStream)) {
                results = (T) objectInputStream.readObject();
            } catch (IOException | ClassNotFoundException e) {
                throw new RuntimeException("Unexpected error deserializing object.");
            }

            return results;
        }

        // Hash string.
        public static String hashString(String input) {
            String results;

            try {
                var messageDigest = MessageDigest.getInstance("SHA-256");
                byte[] hashBytes = messageDigest.digest(input.getBytes(StandardCharsets.UTF_8));
                results = HexFormat.of().formatHex(hashBytes);
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException("Unexpected error getting message digest algorithm.");
            }

            return results;
        }
    }
  learner_created: true
- name: src/blockchain/BlockData.java
  visible: true
  text: |-
    package blockchain;

    import java.io.Serial;
    import java.io.Serializable;

    public class BlockData implements Cloneable, Serializable {
        @Serial
        private static final long serialVersionUID = 1L;
        private String previousHash; // Set by blockchain.
        private long timeStamp; // Set by miners.
        private long nonce; // Set by miners.

        // Block data fields. Set by users.
        private final long blockId;

        public BlockData(long blockId) {
            this.blockId = blockId;
        }

        public String getPreviousHash() {
            return previousHash;
        }

        public void setPreviousHash(String previousHash) {
            this.previousHash = previousHash;
        }

        public long getTimeStamp() {
            return timeStamp;
        }

        public void setTimeStamp(long timeStamp) {
            this.timeStamp = timeStamp;
        }

        public long getNonce() {
            return nonce;
        }

        public void setNonce(long nonce) {
            this.nonce = nonce;
        }

        public long getBlockId() {
            return blockId;
        }

        @Override
        protected Object clone() {
            try {
                return super.clone();
            } catch (CloneNotSupportedException e) {
                throw new RuntimeException("Unexpected error cloning block data.");
            }
        }
    }
  learner_created: true
- name: src/blockchain/Miners.java
  visible: true
  text: |-
    package blockchain;

    import java.time.Duration;
    import java.time.Instant;
    import java.util.Date;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.TimeUnit;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Miners {
        private static int numberOfMiners;
        private static ExecutorService executor;

        public Miners() {
        }

        public static int getNumberOfMiners() {
            return numberOfMiners;
        }

        public static void setNumberOfMiners(int numberOfMiners) {
            Miners.numberOfMiners = numberOfMiners;
        }

        // Start miners.
        public static void startMiners() {
            executor = Executors.newFixedThreadPool(numberOfMiners);
            for (int i = 1; i <= numberOfMiners; i++) {
                executor.execute(new MinerThread(i));
            }
        }

        // Stop miners.
        public static void stopMiners() {
            executor.shutdown();
            while (!executor.isTerminated()) {
                // Sleep for a while.
                try {
                    TimeUnit.MILLISECONDS.sleep(200L);
                } catch (InterruptedException ignored) {
                }
            }
        }

        private static class MinerThread implements Runnable {
            private final Pattern leadingZeroPattern = Pattern.compile("^(0+)");
            private final int minerId;

            public MinerThread(int minerId) {
                this.minerId = minerId;
            }

            @Override
            public void run() {
                long currentBlockId = -1;
                Instant start = Instant.now();

                // Loop until shutdown.
                while (!executor.isShutdown()) {
                    // Is there block data to mine?
                    var blockData = BlockChain.getBlockDataToMine();
                    if (blockData != null) {
                        // Are we on a new block?
                        if (blockData.getBlockId() != currentBlockId) {
                            // Save start time.
                            start = Instant.now();
                            currentBlockId = blockData.getBlockId();
                        }
                        // Try a random nonce to satisfy proof of work.
                        tryANonce(blockData, start);
                    }
                }
            }

            // Try a random nonce to satisfy proof of work.
            private void tryANonce(BlockData blockData, Instant start) {
                // Get target number of zeros.
                int targetNumberOfZeros = BlockChain.getTargetNumberOfZeros();

                // Make clone of block data to manipulate.
                var blockDataLocal = (BlockData) blockData.clone();

                // Set timestamp.
                blockDataLocal.setTimeStamp(new Date().getTime());

                // Set nonce.
                blockDataLocal.setNonce((long) (Math.random() * 1_000_000_000L));

                // Hash block data.
                String hash = BlockChain.hashBlockData(blockDataLocal);

                // Did we satisfy proof of work?
                Matcher leadingZeroMatcher = leadingZeroPattern.matcher(hash);
                if (leadingZeroMatcher.find()) {
                    int leadingZeroCount = leadingZeroMatcher.group(1).length();
                    if (leadingZeroCount >= targetNumberOfZeros) {
                        // Calculate time taken to solve.
                        Instant end = Instant.now();
                        long durationSeconds = Duration.between(start, end).getSeconds();
                        // Submit finished block for adding to blockchain.
                        BlockChain.submitFinishedBlock(new Block(blockDataLocal, hash), minerId, durationSeconds);
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |-
    package blockchain;

    import java.util.ArrayDeque;
    import java.util.LinkedHashSet;
    import java.util.concurrent.atomic.AtomicInteger;
    import java.util.concurrent.atomic.AtomicReference;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BlockChain {
        private static final LinkedHashSet<Block> blockChain = new LinkedHashSet<>();
        private static final int DESIRED_SOLUTION_SECONDS = 2;
        private static final int DESIRED_SOLUTION_PLUS_MINUS = 1;

        private static final AtomicInteger targetNumberOfZeros = new AtomicInteger();
        private static final ArrayDeque<BlockData> blockDataQueue = new ArrayDeque<>();
        private static String previousHash = "0";
        private static final AtomicReference<BlockData> blockDataToMine = new AtomicReference<>();

        static {
            targetNumberOfZeros.set(0);
            blockDataToMine.set(null);
        }

        public BlockChain() {
        }

        public static int getTargetNumberOfZeros() {
            return targetNumberOfZeros.get();
        }

        public static void setTargetNumberOfZeros(int value) {
            targetNumberOfZeros.set(value);
        }

        // Add block data to queue.
        public synchronized static void addBlockData(BlockData blockData) {
            // Add block data to queue.
            blockDataQueue.add(blockData);

            // Is there no block data for miners to work on?
            if (blockDataToMine.get() == null) {
                giveBlockDataToMiners();
            }
        }

        // Give next block data queue item to miners.
        private synchronized static void giveBlockDataToMiners() {
            // Get block data from queue.
            var blockData = blockDataQueue.remove();

            // Set previous hash.
            blockData.setPreviousHash(previousHash);

            // Make block data available to miners.
            blockDataToMine.set(blockData);
        }

        public static int getBlockDataQueueSize() {
            return blockDataQueue.size();
        }

        public static BlockData getBlockDataToMine() {
            return blockDataToMine.get();
        }

        // Submit finished block for adding to blockchain.
        public synchronized static boolean submitFinishedBlock(Block block, int minerId, long durationSeconds) {
            // Was block already added?
            if (blockDataToMine.get() == null) {
                return false;
            }

            // Is block invalid?
            if (isBlockInvalid(block, previousHash, true)) {
                return false;
            }

            // Add block to blockchain.
            blockChain.add(block);
            previousHash = block.getHash();

            // Print block information.
            printInformation(block, minerId, durationSeconds);

            // Adjust proof of work complexity based on time for solution.
            if (durationSeconds < (DESIRED_SOLUTION_SECONDS - DESIRED_SOLUTION_PLUS_MINUS)) {
                targetNumberOfZeros.incrementAndGet();
                System.out.printf("N was increased to %d\n\n", targetNumberOfZeros.get());
            } else if (durationSeconds > (DESIRED_SOLUTION_SECONDS + DESIRED_SOLUTION_PLUS_MINUS)) {
                targetNumberOfZeros.decrementAndGet();
                System.out.print("N was decreased by 1\n\n");
            } else {
                System.out.print("N stays the same\n\n");
            }

            // Is there more block data in queue?
            if (!blockDataQueue.isEmpty()) {
                giveBlockDataToMiners();
            } else {
                blockDataToMine.set(null);
            }

            return true;
        }

        // Is block invalid?
        private static boolean isBlockInvalid(Block block, String previousHash, boolean checkProofOfWork) {
            final Pattern leadingZeroPattern = Pattern.compile("^(0+)");

            // Does previous block hash not match?
            if (!block.getBlockData().getPreviousHash().equals(previousHash)) {
                return true;
            }

            // Does block data hash not match block hash?
            String hash = hashBlockData(block.getBlockData());
            if (!hash.equals(block.getHash())) {
                return true;
            }

            // Do we not need to check proof of work?
            if (!checkProofOfWork) {
                return false;
            }

            // Was proof of work not satisfied?
            Matcher leadingZeroMatcher = leadingZeroPattern.matcher(hash);
            if (leadingZeroMatcher.find()) {
                int leadingZeroCount = leadingZeroMatcher.group(1).length();
                return leadingZeroCount < targetNumberOfZeros.get();
            } else {
                return true;
            }
        }

        // Print block information.
        private static void printInformation(Block block, int minerId, long durationSeconds) {
            var blockData = block.getBlockData();
            String hash = block.getHash();
            System.out.println("Block:");
            System.out.printf("Created by miner # %d\n", minerId);
            System.out.printf("Id: %d\n", blockData.getBlockId());
            System.out.printf("Timestamp: %d\n", blockData.getTimeStamp());
            System.out.printf("Magic number: %d\n", blockData.getNonce());
            System.out.println("Hash of the previous block:");
            System.out.println(blockData.getPreviousHash());
            System.out.println("Hash of the block:");
            System.out.println(hash);
            System.out.printf("Block was generating for %d seconds\n", durationSeconds);
        }

        // Hash block data.
        public static String hashBlockData(BlockData blockData) {
            String blockDataString = Utils.serializeObject(blockData);
            return Utils.hashString(blockDataString);
        }

        // Get validation errors for blockchain.
        public synchronized static String getValidationErrors() {
            var results = new StringBuilder();

            // Loop through blockchain.
            String previousHash = "0";
            for (Block block : blockChain) {
                // Is block invalid?
                if (isBlockInvalid(block, previousHash, false)) {
                    results.append(String.format("%s is invalid.\n", getBlockIdentifier(block)));
                }
                previousHash = block.getHash();
            }

            return results.toString();
        }

        private static String getBlockIdentifier(Block block) {
            return String.format("Block with id %s", block.getBlockData().getBlockId());
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |-
    package blockchain;

    public class Block {
        private final BlockData blockData;
        private final String hash;

        public Block(BlockData blockData, String hash) {
            this.blockData = blockData;
            this.hash = hash;
        }

        public BlockData getBlockData() {
            return blockData;
        }

        public String getHash() {
            return hash;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5416#comment
status: Unchecked
record: -1
